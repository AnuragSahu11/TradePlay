{"ast":null,"code":"import { Server, Model, RestSerializer } from \"miragejs\";\nimport { loginHandler, signupHandler } from \"./backend/controllers/AuthController\";\nimport { getHistoryVideosHandler, addVideoToHistoryHandler, removeVideoFromHistoryHandler, clearHistoryHandler } from \"./backend/controllers/HistoryController\";\nimport { getAllVideosHandler, getVideoHandler } from \"./backend/controllers/VideoController\";\nimport { videos } from \"./backend/db/videos\";\nimport { categories } from \"./backend/db/categories\";\nimport { getAllCategoriesHandler, getCategoryHandler } from \"./backend/controllers/CategoryController\";\nimport { getLikedVideosHandler, addItemToLikedVideos, removeItemFromLikedVideos } from \"./backend/controllers/LikeController\";\nimport { getAllPlaylistsHandler, addNewPlaylistHandler, removePlaylistHandler, getVideosFromPlaylistHandler, addVideoToPlaylistHandler, removeVideoFromPlaylistHandler } from \"./backend/controllers/PlaylistController\";\nimport { users } from \"./backend/db/users\";\nexport function makeServer() {\n  let {\n    environment = \"development\"\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return new Server({\n    serializers: {\n      application: RestSerializer\n    },\n    environment,\n    // TODO: Use Relationships to have named relational Data\n    models: {\n      video: Model,\n      category: Model,\n      user: Model,\n      like: Model,\n      history: Model,\n      playlist: Model\n    },\n\n    // Runs on the start of the server\n    seeds(server) {\n      server.logging = false;\n      videos.forEach(item => {\n        server.create(\"video\", { ...item\n        });\n      });\n      categories.forEach(item => server.create(\"category\", { ...item\n      }));\n      users.forEach(item => server.create(\"user\", { ...item,\n        likes: [],\n        history: [],\n        playlists: []\n      }));\n    },\n\n    routes() {\n      this.namespace = \"api\"; // auth routes (public)\n\n      this.post(\"/auth/signup\", signupHandler.bind(this));\n      this.post(\"/auth/login\", loginHandler.bind(this)); // video routes (public)\n\n      this.get(\"/videos\", getAllVideosHandler.bind(this));\n      this.get(\"video/:videoId\", getVideoHandler.bind(this)); // TODO: POST VIDEO TO DB\n      // categories routes (public)\n\n      this.get(\"/categories\", getAllCategoriesHandler.bind(this));\n      this.get(\"/categories/:categoryId\", getCategoryHandler.bind(this)); // likes routes (private)\n\n      this.get(\"/user/likes\", getLikedVideosHandler.bind(this));\n      this.post(\"/user/likes\", addItemToLikedVideos.bind(this));\n      this.delete(\"/user/likes/:videoId\", removeItemFromLikedVideos.bind(this)); // playlist routes (private)\n\n      this.get(\"/user/playlists\", getAllPlaylistsHandler.bind(this));\n      this.post(\"/user/playlists\", addNewPlaylistHandler.bind(this));\n      this.delete(\"/user/playlists/:playlistId\", removePlaylistHandler.bind(this));\n      this.get(\"/user/playlists/:playlistId\", getVideosFromPlaylistHandler.bind(this));\n      this.post(\"/user/playlists/:playlistId\", addVideoToPlaylistHandler.bind(this));\n      this.delete(\"/user/playlists/:playlistId/:videoId\", removeVideoFromPlaylistHandler.bind(this)); // history routes (private)\n\n      this.get(\"/user/history\", getHistoryVideosHandler.bind(this));\n      this.post(\"/user/history\", addVideoToHistoryHandler.bind(this));\n      this.delete(\"/user/history/:videoId\", removeVideoFromHistoryHandler.bind(this));\n      this.delete(\"/user/history/all\", clearHistoryHandler.bind(this));\n    }\n\n  });\n}","map":{"version":3,"sources":["C:/My stuff/S/2022 Projects/video library app/TradePlay/TradePlay/src/server.js"],"names":["Server","Model","RestSerializer","loginHandler","signupHandler","getHistoryVideosHandler","addVideoToHistoryHandler","removeVideoFromHistoryHandler","clearHistoryHandler","getAllVideosHandler","getVideoHandler","videos","categories","getAllCategoriesHandler","getCategoryHandler","getLikedVideosHandler","addItemToLikedVideos","removeItemFromLikedVideos","getAllPlaylistsHandler","addNewPlaylistHandler","removePlaylistHandler","getVideosFromPlaylistHandler","addVideoToPlaylistHandler","removeVideoFromPlaylistHandler","users","makeServer","environment","serializers","application","models","video","category","user","like","history","playlist","seeds","server","logging","forEach","item","create","likes","playlists","routes","namespace","post","bind","get","delete"],"mappings":"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","sourcesContent":["import { Server, Model, RestSerializer } from \"miragejs\";\nimport {\n  loginHandler,\n  signupHandler,\n} from \"./backend/controllers/AuthController\";\nimport {\n  getHistoryVideosHandler,\n  addVideoToHistoryHandler,\n  removeVideoFromHistoryHandler,\n  clearHistoryHandler,\n} from \"./backend/controllers/HistoryController\";\nimport {\n  getAllVideosHandler,\n  getVideoHandler,\n} from \"./backend/controllers/VideoController\";\nimport { videos } from \"./backend/db/videos\";\nimport { categories } from \"./backend/db/categories\";\nimport {\n  getAllCategoriesHandler,\n  getCategoryHandler,\n} from \"./backend/controllers/CategoryController\";\nimport {\n  getLikedVideosHandler,\n  addItemToLikedVideos,\n  removeItemFromLikedVideos,\n} from \"./backend/controllers/LikeController\";\nimport {\n  getAllPlaylistsHandler,\n  addNewPlaylistHandler,\n  removePlaylistHandler,\n  getVideosFromPlaylistHandler,\n  addVideoToPlaylistHandler,\n  removeVideoFromPlaylistHandler,\n} from \"./backend/controllers/PlaylistController\";\nimport { users } from \"./backend/db/users\";\nexport function makeServer({ environment = \"development\" } = {}) {\n  return new Server({\n    serializers: {\n      application: RestSerializer,\n    },\n    environment,\n    // TODO: Use Relationships to have named relational Data\n    models: {\n      video: Model,\n      category: Model,\n      user: Model,\n      like: Model,\n      history: Model,\n      playlist: Model,\n    },\n\n    // Runs on the start of the server\n    seeds(server) {\n      server.logging = false;\n      videos.forEach((item) => {\n        server.create(\"video\", { ...item });\n      });\n      categories.forEach((item) => server.create(\"category\", { ...item }));\n      users.forEach((item) =>\n        server.create(\"user\", {\n          ...item,\n          likes: [],\n          history: [],\n          playlists: [],\n        })\n      );\n    },\n\n    routes() {\n      this.namespace = \"api\";\n      // auth routes (public)\n      this.post(\"/auth/signup\", signupHandler.bind(this));\n      this.post(\"/auth/login\", loginHandler.bind(this));\n\n      // video routes (public)\n      this.get(\"/videos\", getAllVideosHandler.bind(this));\n      this.get(\"video/:videoId\", getVideoHandler.bind(this));\n\n      // TODO: POST VIDEO TO DB\n\n      // categories routes (public)\n      this.get(\"/categories\", getAllCategoriesHandler.bind(this));\n      this.get(\"/categories/:categoryId\", getCategoryHandler.bind(this));\n\n      // likes routes (private)\n      this.get(\"/user/likes\", getLikedVideosHandler.bind(this));\n      this.post(\"/user/likes\", addItemToLikedVideos.bind(this));\n      this.delete(\"/user/likes/:videoId\", removeItemFromLikedVideos.bind(this));\n\n      // playlist routes (private)\n      this.get(\"/user/playlists\", getAllPlaylistsHandler.bind(this));\n      this.post(\"/user/playlists\", addNewPlaylistHandler.bind(this));\n      this.delete(\n        \"/user/playlists/:playlistId\",\n        removePlaylistHandler.bind(this)\n      );\n\n      this.get(\n        \"/user/playlists/:playlistId\",\n        getVideosFromPlaylistHandler.bind(this)\n      );\n      this.post(\n        \"/user/playlists/:playlistId\",\n        addVideoToPlaylistHandler.bind(this)\n      );\n      this.delete(\n        \"/user/playlists/:playlistId/:videoId\",\n        removeVideoFromPlaylistHandler.bind(this)\n      );\n\n      // history routes (private)\n      this.get(\"/user/history\", getHistoryVideosHandler.bind(this));\n      this.post(\"/user/history\", addVideoToHistoryHandler.bind(this));\n      this.delete(\n        \"/user/history/:videoId\",\n        removeVideoFromHistoryHandler.bind(this)\n      );\n      this.delete(\"/user/history/all\", clearHistoryHandler.bind(this));\n    },\n  });\n}\n"]},"metadata":{},"sourceType":"module"}