{"ast":null,"code":"import { Response } from \"miragejs\";\nimport { requiresAuth } from \"../utils/authUtils\";\n/**\n * All the routes related to Liked Videos are present here.\n * These are private routes.\n * Client needs to add \"authorization\" header with JWT token in it to access it.\n * */\n\n/**\n * This handler handles getting videos from user's likes.\n * send GET Request at /api/user/likes\n * */\n\nexport const getLikedVideosHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    return new Response(200, {}, {\n      likes: user.likes\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\n * This handler handles adding videos to user's likes.\n * send POST Request at /api/user/likes\n * body contains {video}\n * */\n\nexport const addItemToLikedVideos = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  if (user) {\n    const {\n      video\n    } = JSON.parse(request.requestBody);\n\n    if (user.likes.some(item => item.id === video.id)) {\n      return new Response(409, {}, {\n        errors: [\"The video is already in your liked videos\"]\n      });\n    }\n\n    user.likes.push(video);\n    return new Response(201, {}, {\n      likes: user.likes\n    });\n  }\n\n  return new Response(404, {}, {\n    errors: [\"The email you entered is not Registered. Not Found error\"]\n  });\n};\n/**\n * This handler handles removing videos from user's likes.\n * send DELETE Request at /api/user/likes/:videoId\n * */\n\nexport const removeItemFromLikedVideos = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  if (user) {\n    const videoId = request.params.videoId;\n    const filteredLikes = user.likes.filter(item => item._id !== videoId);\n    this.db.users.update({\n      likes: filteredLikes\n    });\n    return new Response(200, {}, {\n      likes: filteredLikes\n    });\n  }\n\n  return new Response(404, {}, {\n    errors: [\"The user you request does not exist. Not Found error.\"]\n  });\n};","map":{"version":3,"sources":["C:/My stuff/S/2022 Projects/video library app/TradePlay/TradePlay/src/backend/controllers/LikeController.js"],"names":["Response","requiresAuth","getLikedVideosHandler","schema","request","user","call","errors","likes","error","addItemToLikedVideos","video","JSON","parse","requestBody","some","item","id","push","removeItemFromLikedVideos","videoId","params","filteredLikes","filter","_id","db","users","update"],"mappings":"AAAA,SAASA,QAAT,QAAyB,UAAzB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,qBAAqB,GAAG,UAAUC,MAAV,EAAkBC,OAAlB,EAA2B;AAC9D,QAAMC,IAAI,GAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,EAAwBF,OAAxB,CAAb;;AACA,MAAI;AACF,QAAI,CAACC,IAAL,EAAW;AACT,aAAO,IAAIL,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;AACEO,QAAAA,MAAM,EAAE,CAAC,0DAAD;AADV,OAHK,CAAP;AAOD;;AACD,WAAO,IAAIP,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;AAAEQ,MAAAA,KAAK,EAAEH,IAAI,CAACG;AAAd,KAAtB,CAAP;AACD,GAXD,CAWE,OAAOC,KAAP,EAAc;AACd,WAAO,IAAIT,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;AACES,MAAAA;AADF,KAHK,CAAP;AAOD;AACF,CAtBM;AAwBP;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,oBAAoB,GAAG,UAAUP,MAAV,EAAkBC,OAAlB,EAA2B;AAC7D,QAAMC,IAAI,GAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,EAAwBF,OAAxB,CAAb;;AACA,MAAIC,IAAJ,EAAU;AACR,UAAM;AAAEM,MAAAA;AAAF,QAAYC,IAAI,CAACC,KAAL,CAAWT,OAAO,CAACU,WAAnB,CAAlB;;AACA,QAAIT,IAAI,CAACG,KAAL,CAAWO,IAAX,CAAiBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYN,KAAK,CAACM,EAA5C,CAAJ,EAAqD;AACnD,aAAO,IAAIjB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;AACEO,QAAAA,MAAM,EAAE,CAAC,2CAAD;AADV,OAHK,CAAP;AAOD;;AACDF,IAAAA,IAAI,CAACG,KAAL,CAAWU,IAAX,CAAgBP,KAAhB;AACA,WAAO,IAAIX,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;AAAEQ,MAAAA,KAAK,EAAEH,IAAI,CAACG;AAAd,KAAtB,CAAP;AACD;;AACD,SAAO,IAAIR,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;AACEO,IAAAA,MAAM,EAAE,CAAC,0DAAD;AADV,GAHK,CAAP;AAOD,CAvBM;AAyBP;AACA;AACA;AACA;;AAEA,OAAO,MAAMY,yBAAyB,GAAG,UAAUhB,MAAV,EAAkBC,OAAlB,EAA2B;AAClE,QAAMC,IAAI,GAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,EAAwBF,OAAxB,CAAb;;AACA,MAAIC,IAAJ,EAAU;AACR,UAAMe,OAAO,GAAGhB,OAAO,CAACiB,MAAR,CAAeD,OAA/B;AACA,UAAME,aAAa,GAAGjB,IAAI,CAACG,KAAL,CAAWe,MAAX,CAAmBP,IAAD,IAAUA,IAAI,CAACQ,GAAL,KAAaJ,OAAzC,CAAtB;AACA,SAAKK,EAAL,CAAQC,KAAR,CAAcC,MAAd,CAAqB;AAAEnB,MAAAA,KAAK,EAAEc;AAAT,KAArB;AACA,WAAO,IAAItB,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;AAAEQ,MAAAA,KAAK,EAAEc;AAAT,KAAtB,CAAP;AACD;;AACD,SAAO,IAAItB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;AAAEO,IAAAA,MAAM,EAAE,CAAC,uDAAD;AAAV,GAHK,CAAP;AAKD,CAbM","sourcesContent":["import { Response } from \"miragejs\";\nimport { requiresAuth } from \"../utils/authUtils\";\n\n/**\n * All the routes related to Liked Videos are present here.\n * These are private routes.\n * Client needs to add \"authorization\" header with JWT token in it to access it.\n * */\n\n/**\n * This handler handles getting videos from user's likes.\n * send GET Request at /api/user/likes\n * */\nexport const getLikedVideosHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    return new Response(200, {}, { likes: user.likes });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles adding videos to user's likes.\n * send POST Request at /api/user/likes\n * body contains {video}\n * */\n\nexport const addItemToLikedVideos = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  if (user) {\n    const { video } = JSON.parse(request.requestBody);\n    if (user.likes.some((item) => item.id === video.id)) {\n      return new Response(\n        409,\n        {},\n        {\n          errors: [\"The video is already in your liked videos\"],\n        }\n      );\n    }\n    user.likes.push(video);\n    return new Response(201, {}, { likes: user.likes });\n  }\n  return new Response(\n    404,\n    {},\n    {\n      errors: [\"The email you entered is not Registered. Not Found error\"],\n    }\n  );\n};\n\n/**\n * This handler handles removing videos from user's likes.\n * send DELETE Request at /api/user/likes/:videoId\n * */\n\nexport const removeItemFromLikedVideos = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  if (user) {\n    const videoId = request.params.videoId;\n    const filteredLikes = user.likes.filter((item) => item._id !== videoId);\n    this.db.users.update({ likes: filteredLikes });\n    return new Response(200, {}, { likes: filteredLikes });\n  }\n  return new Response(\n    404,\n    {},\n    { errors: [\"The user you request does not exist. Not Found error.\"] }\n  );\n};\n"]},"metadata":{},"sourceType":"module"}