{"ast":null,"code":"import { Response } from \"miragejs\";\nimport { requiresAuth } from \"../utils/authUtils\";\n/**\n * All the routes related to User History are present here.\n * These are private routes.\n * Client needs to add \"authorization\" header with JWT token in it to access it.\n * */\n\n/**\n * This handler handles getting videos from user's history.\n * send GET Request at /api/user/history\n * */\n\nexport const getHistoryVideosHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    return new Response(200, {}, {\n      history: user.history\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\n * This handler handles adding videos to user's history.\n * send POST Request at /api/user/history\n * body contains {video}\n * */\n\nexport const addVideoToHistoryHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const {\n      video\n    } = JSON.parse(request.requestBody);\n\n    if (user.history.some(item => item.id === video.id)) {\n      return new Response(409, {}, {\n        errors: [\"The video is already in your history\"]\n      });\n    }\n\n    user.history.push(video);\n    return new Response(201, {}, {\n      history: user.history\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\n * This handler handles removing videos from user's history.\n * send DELETE Request at /api/user/history/:videoId\n * */\n\nexport const removeVideoFromHistoryHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const videoId = request.params.videoId;\n    const filteredHistory = user.history.filter(item => item._id !== videoId);\n    this.db.users.update({\n      history: filteredHistory\n    });\n    return new Response(200, {}, {\n      history: filteredHistory\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\n * This handler handles removing videos from user's history.\n * send DELETE Request at /api/user/history/all\n * */\n\nexport const clearHistoryHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    this.db.users.update({\n      history: []\n    });\n    return new Response(200, {}, {\n      history: []\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};","map":{"version":3,"sources":["C:/My stuff/S/2022 Projects/video library app/TradePlay/TradePlay/src/backend/controllers/HistoryController.js"],"names":["Response","requiresAuth","getHistoryVideosHandler","schema","request","user","call","errors","history","error","addVideoToHistoryHandler","video","JSON","parse","requestBody","some","item","id","push","removeVideoFromHistoryHandler","videoId","params","filteredHistory","filter","_id","db","users","update","clearHistoryHandler"],"mappings":"AAAA,SAASA,QAAT,QAAyB,UAAzB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,uBAAuB,GAAG,UAAUC,MAAV,EAAkBC,OAAlB,EAA2B;AAChE,QAAMC,IAAI,GAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,EAAwBF,OAAxB,CAAb;;AACA,MAAI;AACF,QAAI,CAACC,IAAL,EAAW;AACT,aAAO,IAAIL,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;AACEO,QAAAA,MAAM,EAAE,CAAC,0DAAD;AADV,OAHK,CAAP;AAOD;;AACD,WAAO,IAAIP,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;AAAEQ,MAAAA,OAAO,EAAEH,IAAI,CAACG;AAAhB,KAAtB,CAAP;AACD,GAXD,CAWE,OAAOC,KAAP,EAAc;AACd,WAAO,IAAIT,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;AACES,MAAAA;AADF,KAHK,CAAP;AAOD;AACF,CAtBM;AAwBP;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,wBAAwB,GAAG,UAAUP,MAAV,EAAkBC,OAAlB,EAA2B;AACjE,QAAMC,IAAI,GAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,EAAwBF,OAAxB,CAAb;;AACA,MAAI;AACF,QAAI,CAACC,IAAL,EAAW;AACT,aAAO,IAAIL,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;AACEO,QAAAA,MAAM,EAAE,CAAC,0DAAD;AADV,OAHK,CAAP;AAOD;;AACD,UAAM;AAAEI,MAAAA;AAAF,QAAYC,IAAI,CAACC,KAAL,CAAWT,OAAO,CAACU,WAAnB,CAAlB;;AACA,QAAIT,IAAI,CAACG,OAAL,CAAaO,IAAb,CAAmBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYN,KAAK,CAACM,EAA9C,CAAJ,EAAuD;AACrD,aAAO,IAAIjB,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;AACEO,QAAAA,MAAM,EAAE,CAAC,sCAAD;AADV,OAHK,CAAP;AAOD;;AACDF,IAAAA,IAAI,CAACG,OAAL,CAAaU,IAAb,CAAkBP,KAAlB;AACA,WAAO,IAAIX,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;AAAEQ,MAAAA,OAAO,EAAEH,IAAI,CAACG;AAAhB,KAAtB,CAAP;AACD,GAtBD,CAsBE,OAAOC,KAAP,EAAc;AACd,WAAO,IAAIT,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;AACES,MAAAA;AADF,KAHK,CAAP;AAOD;AACF,CAjCM;AAmCP;AACA;AACA;AACA;;AAEA,OAAO,MAAMU,6BAA6B,GAAG,UAAUhB,MAAV,EAAkBC,OAAlB,EAA2B;AACtE,QAAMC,IAAI,GAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,EAAwBF,OAAxB,CAAb;;AACA,MAAI;AACF,QAAI,CAACC,IAAL,EAAW;AACT,aAAO,IAAIL,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;AACEO,QAAAA,MAAM,EAAE,CAAC,0DAAD;AADV,OAHK,CAAP;AAOD;;AACD,UAAMa,OAAO,GAAGhB,OAAO,CAACiB,MAAR,CAAeD,OAA/B;AACA,UAAME,eAAe,GAAGjB,IAAI,CAACG,OAAL,CAAae,MAAb,CAAqBP,IAAD,IAAUA,IAAI,CAACQ,GAAL,KAAaJ,OAA3C,CAAxB;AACA,SAAKK,EAAL,CAAQC,KAAR,CAAcC,MAAd,CAAqB;AAAEnB,MAAAA,OAAO,EAAEc;AAAX,KAArB;AACA,WAAO,IAAItB,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;AAAEQ,MAAAA,OAAO,EAAEc;AAAX,KAAtB,CAAP;AACD,GAdD,CAcE,OAAOb,KAAP,EAAc;AACd,WAAO,IAAIT,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;AACES,MAAAA;AADF,KAHK,CAAP;AAOD;AACF,CAzBM;AA2BP;AACA;AACA;AACA;;AAEA,OAAO,MAAMmB,mBAAmB,GAAG,UAAUzB,MAAV,EAAkBC,OAAlB,EAA2B;AAC5D,QAAMC,IAAI,GAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,EAAwBF,OAAxB,CAAb;;AACA,MAAI;AACF,QAAI,CAACC,IAAL,EAAW;AACT,aAAO,IAAIL,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;AACEO,QAAAA,MAAM,EAAE,CAAC,0DAAD;AADV,OAHK,CAAP;AAOD;;AACD,SAAKkB,EAAL,CAAQC,KAAR,CAAcC,MAAd,CAAqB;AAAEnB,MAAAA,OAAO,EAAE;AAAX,KAArB;AACA,WAAO,IAAIR,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;AAAEQ,MAAAA,OAAO,EAAE;AAAX,KAAtB,CAAP;AACD,GAZD,CAYE,OAAOC,KAAP,EAAc;AACd,WAAO,IAAIT,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;AACES,MAAAA;AADF,KAHK,CAAP;AAOD;AACF,CAvBM","sourcesContent":["import { Response } from \"miragejs\";\nimport { requiresAuth } from \"../utils/authUtils\";\n\n/**\n * All the routes related to User History are present here.\n * These are private routes.\n * Client needs to add \"authorization\" header with JWT token in it to access it.\n * */\n\n/**\n * This handler handles getting videos from user's history.\n * send GET Request at /api/user/history\n * */\nexport const getHistoryVideosHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    return new Response(200, {}, { history: user.history });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles adding videos to user's history.\n * send POST Request at /api/user/history\n * body contains {video}\n * */\n\nexport const addVideoToHistoryHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    const { video } = JSON.parse(request.requestBody);\n    if (user.history.some((item) => item.id === video.id)) {\n      return new Response(\n        409,\n        {},\n        {\n          errors: [\"The video is already in your history\"],\n        }\n      );\n    }\n    user.history.push(video);\n    return new Response(201, {}, { history: user.history });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles removing videos from user's history.\n * send DELETE Request at /api/user/history/:videoId\n * */\n\nexport const removeVideoFromHistoryHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    const videoId = request.params.videoId;\n    const filteredHistory = user.history.filter((item) => item._id !== videoId);\n    this.db.users.update({ history: filteredHistory });\n    return new Response(200, {}, { history: filteredHistory });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles removing videos from user's history.\n * send DELETE Request at /api/user/history/all\n * */\n\nexport const clearHistoryHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    this.db.users.update({ history: [] });\n    return new Response(200, {}, { history: [] });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}